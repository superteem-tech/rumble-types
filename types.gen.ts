// Rumble API version: 1.14.12
// Generated on: Sun Apr 27 2025 22:09:53 GMT+0800 (Australian Western Standard Time)
// This file is auto-generated by @hey-api/openapi-ts

export type AiChatResponse = {
    success: boolean;
    content: Array<AiChatMessage> | null;
};

export type AiChatMessage = {
    type: string | null;
    text: string | null;
};

export type SummaryTextSettings = {
    type: TextType;
    text: string | null;
};

/**
 * 0 = Text
 * 1 = Markdown
 */
export type TextType = 0 | 1;

export type FactCheck = {
    success: boolean;
    errorMessage: string | null;
    confidence: number;
    explanation: string;
    challenges: Array<string>;
    recommendedVerificationSources: Array<string>;
};

export type ListOfEmail = {
    totalItemCount: number;
    items: Array<Email>;
};

export type Email = {
    id: string | null;
    type: EmailType;
    from: EmailAddress | null;
    replyTo: EmailAddress | null;
    to: EmailAddress | null;
    subject: string | null;
    bodyHtml: string | null;
    created: string;
    modified: string;
    status: EmailStatus;
};

export type EmailType = 'None' | 'EventInvite' | 'EventChanged' | 'ScheduledLink' | 'RequestSurvey' | 'AddedToGroup' | 'AddedToClass' | 'ModuleAttempt' | 'Authentication' | 'Confirm' | 'ContactUser' | 'PublishingRequested' | 'PublishingRequestApproved' | 'PublishingRequestRejected' | 'Welcome' | 'Support' | 'SupportConfirmation' | 'SupportStatusChanged' | 'RequestResetPassword' | 'RequestResetPasswordFailed' | 'PasswordChanged' | 'PrimaryEmailChanged';

export type EmailAddress = {
    address: string | null;
    name: string | null;
};

/**
 * 0 = None
 * 1 = Submitted
 * 2 = Received
 * 3 = Read
 * 4 = Clicked
 * 5 = Spammed
 * 6 = Error
 */
export type EmailStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;

export type ListOfUserAttendance = {
    totalItemCount: number;
    items: Array<UserAttendance>;
};

export type UserAttendance = Attendance & {
    userId: string | null;
    userName: string | null;
    userImageUri: string | null;
    userJobTypeId: string | null;
    userJobTypeName: string | null;
    userJobTypeCategory: string | null;
    userQualifications: string | null;
};

export type Attendance = {
    id: string | null;
    memberId: string | null;
    status: AttendanceStatus;
    created: string;
    modified: string;
    version: number;
};

/**
 * 0 = None
 * 1 = Yes
 * 2 = No
 * 3 = Maybe
 */
export type AttendanceStatus = 0 | 1 | 2 | 3;

export type UpdateAttendanceSettings = {
    status: AttendanceStatus;
    version: number;
};

export type ListOfMeeting = {
    totalItemCount: number;
    items: Array<Meeting>;
};

export type Meeting = {
    id: string | null;
    name: string | null;
    description: string | null;
    start: string | null;
    end: string | null;
    location: Location;
    parentId: string | null;
    version: number;
};

export type Location = {
    address: string | null;
    coordinates: Coordinates;
};

export type Coordinates = {
    longitude: number;
    latitude: number;
};

export type CreateMeetingSettings = {
    parentId: string;
    name: string;
    description: string | null;
    start: string | null;
    end: string | null;
    location: LocationBuilder | null;
    files: Array<CreateFileSettings> | null;
};

export type LocationBuilder = {
    address: string | null;
    longitude: number;
    latitude: number;
};

export type CreateFileSettings = {
    name: string;
    description: string | null;
    dataUri: string;
};

export type UpdateMeetingSettings = {
    name: string;
    description: string | null;
    start: string | null;
    end: string | null;
    location: LocationBuilder | null;
    version: number;
    notify: boolean;
    eventUri: string | null;
};

export type ListOfFile = {
    totalItemCount: number;
    items: Array<File>;
};

export type File = {
    id: string | null;
    name: string | null;
    description: string | null;
    byteCount: number;
    contentType: string | null;
    extension: string | null;
    creatorId: string | null;
    creatorName: string | null;
    created: string;
    modified: string;
    parentId: string | null;
    version: number;
};

export type UpdateFileSettings = {
    name: string;
    description: string | null;
    dataUri: string | null;
    version: number;
};

export type ListOfGroupAttendance = {
    totalItemCount: number;
    items: Array<GroupAttendance>;
};

export type GroupAttendance = Attendance & {
    groupName: string | null;
};

export type ListOfBackup = {
    totalItemCount: number;
    items: Array<Backup>;
};

export type Backup = {
    id: string | null;
    type: BackupType;
    started: string;
    completed: string | null;
    status: BackupStatus;
    message: string | null;
};

/**
 * 0 = Unknown
 * 1 = Scheduled
 * 2 = Manual
 */
export type BackupType = 0 | 1 | 2;

/**
 * 0 = Running
 * 1 = Completed
 * 2 = Error
 */
export type BackupStatus = 0 | 1 | 2;

export type ListOfExternalApplication = {
    totalItemCount: number;
    items: Array<ExternalApplication>;
};

export type ExternalApplication = {
    id: string | null;
    name: string | null;
    imageUri: string | null;
    endpoint: string | null;
    isDefault: boolean;
    version: number;
};

export type CreateExternalApplicationSettings = {
    name: string;
    imageUri: string | null;
    endpoint: string | null;
    isDefault: boolean;
};

export type UpdateExternalApplicationSettings = {
    name: string;
    imageUri: string | null;
    endpoint: string | null;
    isDefault: boolean;
    version: number;
};

export type ResizedImage = {
    uri: string | null;
    width: number;
    height: number;
};

export type ListOfLog = {
    totalItemCount: number;
    items: Array<Log>;
};

export type Log = {
    id: string | null;
    created: string;
    message: string | null;
    level: number;
    context: string | null;
};

export type MarkdownPreviewSettings = {
    text: string | null;
};

export type Platform = {
    id: string | null;
    name: string | null;
    environment: string | null;
    timeZoneId: string | null;
    version: ApplicationVersion;
    compileConfiguration: string | null;
    compileDate: string | null;
    reCaptchaSiteKey: string | null;
    supportEmailAddress: string | null;
    systemEmailAddress: string | null;
    cultures: Array<Culture> | null;
};

export type ApplicationVersion = {
    major: number;
    minor: number;
    build: number;
};

export type Culture = {
    id: string | null;
    name: string | null;
    datePattern: string | null;
    shortDatePattern: string | null;
    timePattern: string | null;
    shortTimePattern: string | null;
};

export type PlatformStatus = {
    status: SystemStatus;
    buildingProgress: number;
};

/**
 * 0 = Built
 * 1 = Building
 * 2 = Maintenance
 * -1 = Failed
 */
export type SystemStatus = 0 | 1 | 2 | -1;

export type ListOfProjectionBuild = {
    totalItemCount: number;
    items: Array<ProjectionBuild>;
};

export type ProjectionBuild = {
    eventsProcessed: number;
    estimatedTotalEvents: number;
    status: ProjectionStatus;
};

/**
 * 0 = Unknown
 * 1 = Pending
 * 2 = Running
 * 3 = Completed
 * -1 = Failed
 */
export type ProjectionStatus = 0 | 1 | 2 | 3 | -1;

export type Notebook = {
    id: string | null;
    ownerType: NotebookOwnerType;
    ownerId: string | null;
    notes: Array<NoteInNotebook> | null;
    created: string;
    modified: string;
    version: number;
};

export type NotebookOwnerType = 'Unknown' | 'Group';

export type NoteInNotebook = {
    id: string | null;
    title: string | null;
    created: string;
    modified: string;
};

export type CreateNotebookSettings = {
    ownerType: NotebookOwnerType;
    ownerId: string | null;
};

export type UpdateNotebookSettings = {
    noteIds: Array<string> | null;
    version: number;
};

export type Note = {
    id: string | null;
    title: string | null;
    blocks: Array<unknown> | null;
    created: string;
    modified: string;
    version: number;
};

export type CreateNoteSettings = {
    notebookId: string | null;
    title: string;
    blocks: Array<unknown>;
};

export type UpdateNoteSettings = {
    title: string;
    blocks: Array<unknown>;
    version: number;
};

export type ListOfNotification = {
    totalItemCount: number;
    items: Array<Notification>;
};

export type Notification = {
    id: string | null;
    type: string | null;
    recipientId: string | null;
    parameters: unknown;
    seen: boolean;
    read: boolean;
    creatorId: string | null;
    creatorName: string | null;
    created: string;
    version: number;
};

export type UpdateNotificationSettings = {
    seen: boolean;
    read: boolean;
    version: number;
};

export type ListOfScheduledEmail = {
    totalItemCount: number;
    items: Array<ScheduledEmail>;
};

export type ScheduledEmail = {
    id: string | null;
    type: string | null;
    title: string | null;
    note: string | null;
    externalApplicationId: string | null;
    groupId: string | null;
    groupName: string | null;
    organisationId: string | null;
    timeZoneId: string | null;
    creatorId: string | null;
    created: string;
    recipientIds: Array<string> | null;
    parameters: unknown;
    schedule: ScheduleOption | null;
    version: number;
};

export type ScheduleOption = {
    start: string;
    repeatType: RepeatType;
    repeatInterval: number;
    repeatOn: Array<number> | null;
    end: string | null;
};

/**
 * 0 = None
 * 1 = Daily
 * 2 = Weekly
 * 3 = MonthlyByDay
 * 4 = MonthlyByDayOfWeek
 * 5 = Yearly
 */
export type RepeatType = 0 | 1 | 2 | 3 | 4 | 5;

export type CreateScheduledEmailSettings = {
    type: string;
    title: string | null;
    note: string | null;
    groupId: string;
    schedule: ScheduleOption;
    recipientIds: Array<string> | null;
    externalApplicationId: string | null;
    parameters: unknown;
};

export type UpdateScheduledEmailSettings = {
    title: string | null;
    note: string | null;
    schedule: ScheduleOption | null;
    recipientIds: Array<string> | null;
    externalApplicationId: string | null;
    parameters: unknown;
    version: number;
};

export type ListOfObservationContent = {
    totalItemCount: number;
    items: Array<ObservationContent>;
};

export type ObservationContent = {
    id: string | null;
    publisherId: string | null;
    definitionId: string | null;
    questions: Array<unknown> | null;
    published: boolean;
    created: string;
    modified: string;
    version: number;
};

export type CreateObservationContentSettings = {
    definitionId: string;
    questions: Array<unknown>;
    published: boolean;
};

export type UpdateObservationContentSettings = {
    questions: Array<unknown>;
    version: number;
};

export type ListOfLocatableObservation = {
    totalItemCount: number;
    items: Array<LocatableObservation>;
};

export type LocatableObservation = Observation & {
    coordinates: Coordinates | null;
};

export type Observation = {
    id: string | null;
    name: string | null;
    performed: string;
    answers: Array<unknown> | null;
    groupId: string | null;
    groupName: string | null;
    groupType: string | null;
    labelIds: Array<string> | null;
    organisationId: string | null;
    observerId: string | null;
    observerName: string | null;
    definitionId: string | null;
    publisherId: string | null;
    contentId: string | null;
    creatorId: string | null;
    version: number;
};

export type ObservationAreaOptions = PageOptions & {
    southWest: CoordinatesBuilder | null;
    northEast: CoordinatesBuilder | null;
};

export type CoordinatesBuilder = {
    longitude: number;
    latitude: number;
};

export type PageOptions = {
    skip: number;
    /**
     * The number (0 - 1000 inclusive) of items to get from the API.
     */
    take: number;
};

export type ListOfObservation = {
    totalItemCount: number;
    items: Array<Observation>;
};

export type CreateObservationSettings = {
    contentId: string;
    groupId: string;
    performed: string;
    labelIds: Array<string> | null;
    observerId: string | null;
    answers: Array<unknown> | null;
};

export type UpdateObservationSettings = {
    performed: string;
    labelIds: Array<string> | null;
    observerId: string | null;
    answers: Array<unknown> | null;
    version: number;
};

export type PredictObservationSettings = {
    dataUri: string;
};

export type ListOfObservationDefinition = {
    totalItemCount: number;
    items: Array<ObservationDefinition>;
};

export type ObservationDefinition = {
    id: string | null;
    name: string | null;
    description: string | null;
    performedDisplayOption: ObservationDateTimeDisplayOption;
    teamLabelsVisibility: ObservationAttributeVisibility;
    publisherId: string | null;
    publisherName: string | null;
    published: boolean;
    publishedContentId: string | null;
    programs: Array<ProgramInObservationDefinition> | null;
    version: number;
};

/**
 * 0 = DateTime
 * 1 = Date
 */
export type ObservationDateTimeDisplayOption = 0 | 1;

/**
 * 0 = Hidden
 * 1 = Optional
 * 2 = Required
 */
export type ObservationAttributeVisibility = 0 | 1 | 2;

export type ProgramInObservationDefinition = {
    id: string | null;
    name: string | null;
};

export type CreateObservationDefinitionSettings = {
    publisherId: string;
    name: string;
    description: string | null;
    performedDisplayOption: ObservationDateTimeDisplayOption;
    teamLabelsVisibility: ObservationAttributeVisibility;
};

export type UpdateObservationDefinitionSettings = {
    name: string;
    description: string | null;
    performedDisplayOption: ObservationDateTimeDisplayOption;
    teamLabelsVisibility: ObservationAttributeVisibility;
    version: number;
};

export type ListOfObservationForm = {
    totalItemCount: number;
    items: Array<ObservationForm>;
};

export type ObservationForm = {
    id: string | null;
    publisherId: string | null;
    definitionId: string | null;
    contentId: string | null;
    fileQuestionIndex: number | null;
    modelId: string | null;
    modelVersion: string | null;
    widthMillimetres: number;
    heightMillimetres: number;
    modified: string;
    version: number;
};

export type CreateObservationFormSettings = {
    contentId: string;
    /**
     * The index of the file question in the target observation content
     * that will be used to store the OCR image.
     */
    fileQuestionIndex: number | null;
    /**
     * ID of the ML training model.
     */
    modelId: string;
    /**
     * Version of the ML training model.
     */
    modelVersion: string;
    widthMillimetres: number;
    heightMillimetres: number;
};

export type UpdateObservationFormSettings = {
    fileQuestionIndex: number | null;
    modelId: string;
    modelVersion: string;
    widthMillimetres: number;
    heightMillimetres: number;
    version: number;
};

export type MigrateObservationDefinitionSettings = {
    publisherId: string;
    version: number;
};

export type DuplicateObservationDefinitionSettings = {
    name: string;
    description: string;
    /**
     * List of consumers to be migrated with the new observation definition.
     */
    consumerIds: Array<string>;
    dryRun: boolean;
};

export type BatchMergeObservationAnonymousUsersSettings = {
    definitionId: string;
    groupId: string;
    anonymousUsers: Array<string>;
    userId: string;
};

export type ListOfObservationSettings = {
    totalItemCount: number;
    items: Array<ObservationSettings>;
};

export type ObservationSettings = {
    id: string | null;
    organisationId: string | null;
    definitionId: string | null;
    publisherId: string | null;
    privacy: ObservationPrivacyLevel | null;
    created: string;
    modified: string;
    version: number;
};

/**
 * 0 = Open
 * 1 = Closed
 */
export type ObservationPrivacyLevel = 0 | 1;

export type CreateObservationSettingsSettings = {
    organisationId: string;
    definitionId: string;
    privacy: ObservationPrivacyLevel | null;
};

export type UpdateObservationSettingsSettings = {
    privacy: ObservationPrivacyLevel | null;
    version: number;
};

export type Customer = {
    id: string | null;
    userId: string | null;
};

export type Merchant = {
    id: string | null;
    publisherId: string | null;
    verified: boolean;
};

export type Payment = {
    id: string | null;
    created: string;
    userId: string | null;
    customerId: string | null;
    publisherId: string | null;
    merchantId: string | null;
    productId: string | null;
    itemId: string | null;
    currencyCode: string | null;
    amount: number;
    merchantAmount: number;
    status: PaymentStatus;
};

/**
 * 0 = None
 * 1 = Pending
 * 2 = Succeeded
 * 3 = Failed
 * 4 = Refunded
 */
export type PaymentStatus = 0 | 1 | 2 | 3 | 4;

export type CreatePaymentSettings = {
    productId: string;
    token: string;
};

export type Region = {
    name: string | null;
    countries: Array<Country> | null;
};

export type Country = {
    name: string | null;
    code: string | null;
    currencies: Array<Currency> | null;
};

export type Currency = {
    name: string | null;
    code: string | null;
    symbol: string | null;
};

export type Product = {
    id: string | null;
    itemName: string | null;
    itemType: string | null;
    itemDescription: string | null;
    publisherId: string | null;
    publisherName: string | null;
    publisherApproved: boolean;
    programId: string | null;
    programName: string | null;
    merchantId: string | null;
    itemId: string | null;
    prices: Array<Price> | null;
    published: boolean;
    version: number;
};

export type Price = {
    countryCode: string | null;
    currencyCode: string | null;
    amount: number;
};

export type CreateProductSettings = {
    publisherId: string;
    itemId: string;
    published: boolean;
    prices: Array<Price> | null;
};

export type UpdateProductSettings = {
    prices: Array<Price> | null;
    published: boolean;
    version: number;
};

export type ListOfPublisher = {
    totalItemCount: number;
    items: Array<Publisher>;
};

export type Publisher = {
    id: string | null;
    requested: boolean;
    request: PublishingOptions | null;
    approved: boolean;
    publishing: PublishingOptions | null;
};

export type PublishingOptions = {
    freeBusinessToConsumer: boolean;
    paidBusinessToConsumer: boolean;
    businessToBusiness: boolean;
};

export type RequestPublisherSettings = {
    options: PublishingOptions;
    notes: string | null;
    approvalUri: string | null;
};

export type ApprovePublisherSettings = {
    options: PublishingOptions;
    notes: string | null;
    publishingUri: string | null;
};

export type ListOfImplementation = {
    totalItemCount: number;
    items: Array<Implementation>;
};

export type Implementation = {
    id: string | null;
    templateId: string | null;
    creatorId: string | null;
    publisherId: string | null;
    publisherName: string | null;
    publisherLogoUri: string | null;
    consumerId: string | null;
    consumerName: string | null;
    consumerLogoUri: string | null;
    teamId: string | null;
    teamName: string | null;
    name: string | null;
    description: string | null;
    startDate: string | null;
    archived: boolean;
    phases: Array<PhaseInImplementation> | null;
    version: number;
};

export type PhaseInImplementation = {
    name: string | null;
    order: number;
    tasks: Array<TaskInImplementation> | null;
};

export type TaskInImplementation = {
    id: string | null;
    name: string | null;
    order: number;
    status: TaskStatus;
};

/**
 * 0 = None
 * 1 = NotStarted
 * 2 = Started
 * 3 = Complete
 * 4 = Rejected
 */
export type TaskStatus = 0 | 1 | 2 | 3 | 4;

export type ListOfTask = {
    totalItemCount: number;
    items: Array<Task>;
};

export type Task = {
    id: string | null;
    groupId: string | null;
    creatorId: string | null;
    creatorName: string | null;
    creatorImageUri: string | null;
    templateId: string | null;
    name: string | null;
    description: string | null;
    estimatedDuration: string;
    status: TaskStatus;
    due: string | null;
    subtasks: Array<SubtaskInTask> | null;
    assignees: Array<AssigneeInTask> | null;
    version: number;
};

export type SubtaskInTask = {
    id: string | null;
    name: string | null;
    order: number;
    estimatedDuration: string;
    status: TaskStatus;
    due: string | null;
};

export type AssigneeInTask = {
    id: string | null;
    name: string | null;
    imageUri: string | null;
};

export type CreateImplementationSettings = {
    publisherId: string;
    templateId: string | null;
    consumerId: string | null;
    teamId: string | null;
    name: string;
    description: string | null;
    startDate: string | null;
    phases: Array<ImplementationPhase> | null;
};

export type ImplementationPhase = {
    name: string | null;
    order: number;
    tasks: Array<PhaseTask> | null;
};

export type PhaseTask = {
    id: string | null;
    order: number;
};

export type UpdateImplementationSettings = {
    name: string;
    description: string | null;
    phases: Array<ImplementationPhase> | null;
    startDate: string | null;
    archived: boolean;
    version: number;
};

export type ListOfItemActivation = {
    totalItemCount: number;
    items: Array<ItemActivation>;
};

export type ItemActivation = {
    id: string | null;
    itemId: string | null;
    itemType: string | null;
    itemName: string | null;
    programs: Array<ProgramInItemActivation> | null;
    publisherId: string | null;
    publisherName: string | null;
    consumerOrganisationId: string | null;
    consumerType: string | null;
    consumerId: string | null;
    consumerName: string | null;
    activated: boolean;
    version: number;
    created: string;
    modified: string;
};

export type ProgramInItemActivation = {
    id: string | null;
    name: string | null;
};

export type ListOfProgramActivation = {
    totalItemCount: number;
    items: Array<ProgramActivation>;
};

export type ProgramActivation = {
    id: string | null;
    programId: string | null;
    consumerType: string | null;
    consumerId: string | null;
    consumerName: string | null;
    launchedAt: string;
    sponsor: string | null;
    currentPhaseId: string | null;
    phaseActivations: Array<PhaseActivationInProgramActivation> | null;
    version: number;
};

export type PhaseActivationInProgramActivation = {
    id: string | null;
    status: ProgramPhaseActivationStatus;
};

/**
 * 0 = NotActivated
 * 1 = Requested
 * 2 = Activated
 * 3 = Deactivated
 */
export type ProgramPhaseActivationStatus = 0 | 1 | 2 | 3;

export type ActivateProgramPhaseSettings = {
    consumerId: string;
    programPhaseId: string;
    sponsor: string | null;
};

export type ListOfProgram = {
    totalItemCount: number;
    items: Array<Program>;
};

export type Program = {
    id: string | null;
    name: string | null;
    description: string | null;
    logoUri: string | null;
    bannerUri: string | null;
    publisherId: string | null;
    publisherName: string | null;
    publisherLogoUri: string | null;
    resources: Array<ProgramResource> | null;
    phases: Array<ProgramPhaseInProgram> | null;
    version: number;
};

export type ProgramResource = {
    id: string | null;
    type: ProgramResourceType;
};

/**
 * 0 = Course
 * 1 = ObservationDefinition
 * 2 = Survey
 * 3 = Implementation
 */
export type ProgramResourceType = 0 | 1 | 2 | 3;

export type ProgramPhaseInProgram = {
    id: string | null;
    resources: Array<ProgramResource> | null;
};

export type CreateProgramSettings = {
    publisherId: string;
    name: string;
    description: string | null;
    bannerUri: string | null;
    logoUri: string | null;
    resources: Array<ProgramResource> | null;
};

export type UpdateProgramSettings = {
    name: string;
    description: string | null;
    bannerUri: string | null;
    logoUri: string | null;
    resources: Array<ProgramResource> | null;
    version: number;
};

export type ProgramPhase = {
    id: string | null;
    publisherId: string | null;
    publisherName: string | null;
    publisherLogoUri: string | null;
    programId: string | null;
    programName: string | null;
    programLogoUri: string | null;
    programBannerUri: string | null;
    name: string | null;
    description: string | null;
    resources: Array<ProgramResource> | null;
    version: number;
};

export type CreateProgramPhaseSettings = {
    programId: string;
    name: string;
    description: string | null;
    resources: Array<ProgramResource> | null;
};

export type UpdateProgramPhaseSettings = {
    name: string;
    description: string | null;
    resources: Array<ProgramResource> | null;
    version: number;
};

export type ListOfComment = {
    totalItemCount: number;
    items: Array<Comment>;
};

export type Comment = {
    id: string | null;
    rootId: string | null;
    parentId: string | null;
    content: string | null;
    creatorId: string | null;
    creatorName: string | null;
    creatorImageUri: string | null;
    creatorJobTypeId: string | null;
    creatorJobTypeName: string | null;
    created: string;
    modifierId: string | null;
    modifierName: string | null;
    modified: string;
    replyCount: number;
    version: number;
};

export type CreateCommentSettings = {
    parentId: string | null;
    content: string;
};

export type UpdateCommentSettings = {
    content: string;
    version: number;
};

export type CreateTaskSettings = {
    groupId: string;
    templateId: string | null;
    name: string;
    description: string | null;
    estimatedDuration: string;
    due: string | null;
    subtasks: Array<TaskSubtask> | null;
    assigneeIds: Array<string> | null;
};

export type TaskSubtask = {
    id: string | null;
    order: number;
};

export type UpdateTaskSettings = {
    name: string;
    description: string | null;
    estimatedDuration: string;
    status: TaskStatus;
    due: string | null;
    subtasks: Array<TaskSubtask> | null;
    assigneeIds: Array<string> | null;
    version: number;
};

export type Sharing = {
    id: string | null;
    aliasId: string | null;
    note: string | null;
    type: SharingType;
    payload: unknown;
    creatorId: string | null;
    creatorType: IdentityType;
    created: string;
    expires: string;
    disabled: boolean;
};

export type SharingType = 'GroupInvitation';

/**
 * 0 = None
 * 1 = User
 * 2 = Organisation
 */
export type IdentityType = 0 | 1 | 2;

export type ListOfSharing = {
    totalItemCount: number;
    items: Array<Sharing>;
};

export type CreateGroupInvitationSharingSettings = CreateSharingSettingsBase & {
    groupId: string;
    roles: Array<string> | null;
};

export type CreateSharingSettingsBase = {
    aliasId: string | null;
    note: string | null;
    duration: string | null;
};

export type ListOfTicket = {
    totalItemCount: number;
    items: Array<Ticket>;
};

export type Ticket = {
    id: string | null;
    version: number;
    message: string | null;
    ticketType: TicketType;
    userId: string | null;
    userEmail: string | null;
    userName: string | null;
    created: string;
    modified: string;
    status: TicketStatus;
    statusReason: string | null;
};

/**
 * 0 = None
 * 1 = GeneralEnquiry
 */
export type TicketType = 0 | 1;

/**
 * 0 = Open
 * 1 = Resolved
 * 2 = Rejected
 */
export type TicketStatus = 0 | 1 | 2;

export type CreateTicketSettings = {
    userEmail: string;
    userName: string;
    message: string;
    type: TicketType;
};

export type UpdateTicketSettings = {
    status: TicketStatus;
    reason: string | null;
    version: number;
};

export type ListOfSurveyContent = {
    totalItemCount: number;
    items: Array<SurveyContent>;
};

export type SurveyContent = {
    id: string | null;
    publisherId: string | null;
    surveyId: string | null;
    questions: Array<unknown> | null;
    published: boolean;
    created: string;
    modified: string;
    version: number;
};

export type CreateSurveyContentSettings = {
    questions: Array<unknown>;
    published: boolean;
};

export type UpdateSurveyContentSettings = {
    questions: Array<unknown>;
    version: number;
};

export type SurveyQuestionTypes = {
    listQuestion: ListQuestion | null;
    compositeQuestion: CompositeQuestion | null;
    decimalQuestion: DecimalQuestion | null;
    integerQuestion: IntegerQuestion | null;
    multipleChoiceQuestion: MultipleChoiceQuestion | null;
    stringQuestion: StringQuestion | null;
    percentageQuestion: PercentageQuestion | null;
    dateTimeQuestion: DateTimeQuestion | null;
    timeSpanQuestion: TimeSpanQuestion | null;
    userQuestion: UserQuestion | null;
    groupQuestion: GroupQuestion | null;
    fileQuestion: FileQuestion | null;
    binaryQuestion: BinaryQuestion | null;
    timeOfDayQuestion: TimeOfDayQuestion | null;
    emailQuestion: EmailQuestion | null;
    labelQuestion: LabelQuestion | null;
};

export type ListQuestion = QuestionBase & {
    layout: LayoutType;
    question: unknown;
    minimumAnswers: number | null;
    maximumAnswers: number | null;
};

/**
 * 0 = None
 * 1 = Horizontal
 * 2 = Vertical
 */
export type LayoutType = 0 | 1 | 2;

export type QuestionBase = {
    type: string | null;
    label: string | null;
    note: string | null;
    variable: string | null;
    required: boolean;
    enableIf: string | null;
    customValidations: Array<CustomValidation> | null;
};

export type CustomValidation = {
    expression: string | null;
    errorMessage: string | null;
};

export type CompositeQuestion = QuestionBase & {
    layout: LayoutType;
    questions: Array<unknown> | null;
};

export type DecimalQuestion = QuestionBase & {
    minimum: number | null;
    maximum: number | null;
};

export type IntegerQuestion = QuestionBase & {
    display: IntegerQuestionDisplayType;
    minimum: number | null;
    maximum: number | null;
};

/**
 * 0 = None
 * 1 = Counter
 */
export type IntegerQuestionDisplayType = 0 | 1;

export type MultipleChoiceQuestion = QuestionBase & {
    options: Array<string> | null;
    minimumResponses: number | null;
    maximumResponses: number | null;
};

export type StringQuestion = QuestionBase & {
    lineType: LineType;
    minimumLength: number | null;
    maximumLength: number | null;
};

/**
 * 0 = None
 * 1 = SingleLine
 * 2 = MultiLine
 */
export type LineType = 0 | 1 | 2;

export type PercentageQuestion = QuestionBase & {
    minimum: number | null;
    maximum: number | null;
};

export type DateTimeQuestion = QuestionBase & {
    constraint: DateTimeConstraintType;
    minimum: string | null;
    maximum: string | null;
};

/**
 * 0 = None
 * 1 = Date
 */
export type DateTimeConstraintType = 0 | 1;

export type TimeSpanQuestion = QuestionBase & {
    constraint: TimeSpanConstraintType;
    minimum: string | null;
    maximum: string | null;
};

/**
 * 0 = None
 * 1 = Days
 * 2 = Hours
 * 3 = Minutes
 * 4 = Seconds
 */
export type TimeSpanConstraintType = 0 | 1 | 2 | 3 | 4;

export type UserQuestion = QuestionBase & {
    jobTypeCategories: Array<string> | null;
    jobTypeIds: Array<string> | null;
};

export type GroupQuestion = QuestionBase & {
    groupType: string | null;
};

export type FileQuestion = QuestionBase & {
    contentTypes: Array<string> | null;
};

export type BinaryQuestion = QuestionBase & {
    [key: string]: never;
};

export type TimeOfDayQuestion = QuestionBase & {
    [key: string]: never;
};

export type EmailQuestion = QuestionBase & {
    constraint: DomainConstraint | null;
};

export type DomainConstraint = {
    type: DomainConstraintType;
    domains: Array<string> | null;
};

/**
 * 0 = Black
 * 1 = White
 */
export type DomainConstraintType = 0 | 1;

export type LabelQuestion = QuestionBase & {
    minimumResponses: number | null;
    maximumResponses: number | null;
};

export type SurveyAnswerTypes = {
    listAnswer: ListAnswer | null;
    compositeAnswer: CompositeAnswer | null;
    decimalAnswer: DecimalAnswer | null;
    integerAnswer: IntegerAnswer | null;
    multipleChoiceAnswer: MultipleChoiceAnswer | null;
    stringAnswer: StringAnswer | null;
    percentageAnswer: PercentageAnswer | null;
    dateTimeAnswer: DateTimeAnswer | null;
    timeSpanAnswer: TimeSpanAnswer | null;
    userAnswer: UserAnswer | null;
    groupAnswer: GroupAnswer | null;
    fileAnswer: FileAnswer | null;
    binaryAnswer: BinaryAnswer | null;
    timeOfDayAnswer: TimeOfDayAnswer | null;
    emailAnswer: EmailAnswer | null;
    labelAnswer: LabelAnswer | null;
};

export type ListAnswer = AnswerBaseOfObjectOf & {
    [key: string]: never;
};

export type AnswerBaseOfObjectOf = {
    type: string | null;
    questionIndex: number;
    value: Array<unknown> | null;
};

export type CompositeAnswer = AnswerBaseOfObjectOf & {
    [key: string]: never;
};

export type DecimalAnswer = AnswerBaseOfNullableDouble & {
    [key: string]: never;
};

export type AnswerBaseOfNullableDouble = {
    type: string | null;
    questionIndex: number;
    value: number | null;
};

export type IntegerAnswer = AnswerBaseOfNullableInteger & {
    [key: string]: never;
};

export type AnswerBaseOfNullableInteger = {
    type: string | null;
    questionIndex: number;
    value: number | null;
};

export type MultipleChoiceAnswer = AnswerBaseOfInt32Of & {
    [key: string]: never;
};

export type AnswerBaseOfInt32Of = {
    type: string | null;
    questionIndex: number;
    value: Array<number> | null;
};

export type StringAnswer = AnswerBaseOfString & {
    [key: string]: never;
};

export type AnswerBaseOfString = {
    type: string | null;
    questionIndex: number;
    value: string | null;
};

export type PercentageAnswer = AnswerBaseOfNullableDouble & {
    [key: string]: never;
};

export type DateTimeAnswer = AnswerBaseOfNullableDateTime & {
    [key: string]: never;
};

export type AnswerBaseOfNullableDateTime = {
    type: string | null;
    questionIndex: number;
    value: string | null;
};

export type TimeSpanAnswer = AnswerBaseOfNullableTimeSpan & {
    [key: string]: never;
};

export type AnswerBaseOfNullableTimeSpan = {
    type: string | null;
    questionIndex: number;
    value: string | null;
};

export type UserAnswer = AnswerBaseOfUserAnswerValue & {
    [key: string]: never;
};

export type AnswerBaseOfUserAnswerValue = {
    type: string | null;
    questionIndex: number;
    value: UserAnswerValue | null;
};

export type UserAnswerValue = {
    valueType: UserValueType;
    value: string | null;
};

/**
 * 0 = Id
 * 1 = Name
 */
export type UserValueType = 0 | 1;

export type GroupAnswer = AnswerBaseOfString & {
    [key: string]: never;
};

export type FileAnswer = AnswerBaseOfString & {
    [key: string]: never;
};

export type BinaryAnswer = AnswerBaseOfBoolean & {
    [key: string]: never;
};

export type AnswerBaseOfBoolean = {
    type: string | null;
    questionIndex: number;
    value: boolean;
};

export type TimeOfDayAnswer = AnswerBaseOfNullableTimeSpan & {
    [key: string]: never;
};

export type EmailAnswer = AnswerBaseOfString & {
    [key: string]: never;
};

export type LabelAnswer = AnswerBaseOfStringOf & {
    [key: string]: never;
};

export type AnswerBaseOfStringOf = {
    type: string | null;
    questionIndex: number;
    value: Array<string> | null;
};

export type SurveySettings = {
    questions: Array<unknown> | null;
};

export type ListOfSurvey = {
    totalItemCount: number;
    items: Array<Survey>;
};

export type Survey = {
    id: string | null;
    publisherId: string | null;
    name: string | null;
    description: string | null;
    isPublic: boolean;
    published: boolean;
    publishedContentId: string | null;
    version: number;
};

export type CreateSurveySettings = {
    publisherId: string;
    name: string;
    description: string | null;
    isPublic: boolean;
};

export type UpdateSurveySettings = {
    name: string;
    description: string | null;
    isPublic: boolean;
    version: number;
};

export type ListOfSurveyRequest = {
    totalItemCount: number;
    items: Array<SurveyRequest>;
};

export type SurveyRequest = {
    id: string | null;
    surveyId: string | null;
    surveyName: string | null;
    surveyPublisherId: string | null;
    groupId: string | null;
    respondentId: string | null;
    respondentName: string | null;
    creatorId: string | null;
    creatorName: string | null;
    token: string | null;
    created: string;
    version: number;
};

export type Token = {
    value: string | null;
};

export type CreateSurveyRequestSettings = {
    surveyId: string;
    groupId: string;
    respondentId: string;
    message: string | null;
};

export type ListOfSurveyResponse = {
    totalItemCount: number;
    items: Array<SurveyResponse>;
};

export type SurveyResponse = {
    id: string | null;
    surveyId: string | null;
    surveyName: string | null;
    surveyPublisherId: string | null;
    surveyContentId: string | null;
    surveyRequestId: string | null;
    groupId: string | null;
    parentGroupIds: Array<string> | null;
    respondentId: string | null;
    respondentName: string | null;
    respondentIPAddress: string | null;
    respondentUserAgent: string | null;
    respondentJobTypeId: string | null;
    answers: Array<unknown> | null;
    started: string;
    submitted: string | null;
    version: number;
};

export type CreateSurveyResponseSettings = {
    surveyContentId: string;
    groupId: string;
    surveyRequestId: string | null;
    answers: Array<unknown> | null;
    submitted: boolean;
};

export type UpdateSurveyResponseSettings = {
    answers: Array<unknown> | null;
    submitted: boolean;
    version: number;
};

export type Actor = {
    id: string | null;
    name: string | null;
    imageUri: string | null;
    type: ActorType;
};

/**
 * 0 = None
 * 1 = User
 * 2 = TrainingSession
 * 3 = Team
 */
export type ActorType = 0 | 1 | 2 | 3;

export type ListOfModuleAttemptOfBookResult = {
    totalItemCount: number;
    items: Array<ModuleAttemptOfBookResult>;
};

export type ModuleAttemptOfBookResult = ModuleAttempt & {
    result: BookResult | null;
};

export type BookResult = {
    bookmark: Bookmark | null;
    maxBookmark: Bookmark | null;
};

export type Bookmark = {
    percentage: number;
};

export type ModuleAttempt = {
    id: string | null;
    actorId: string | null;
    actorType: ActorType;
    actorName: string | null;
    actorImageUri: string | null;
    creatorId: string | null;
    creatorName: string | null;
    publisherId: string | null;
    publisherName: string | null;
    publisherLogoUri: string | null;
    moduleId: string | null;
    moduleName: string | null;
    moduleContentId: string | null;
    moduleType: string | null;
    result: unknown;
    calculatedResult: CalculatedModuleResult;
    classIds: Array<string> | null;
    trainingSessionId: string | null;
    trainingSessionModuleAttemptId: string | null;
    created: string;
    modified: string;
    passed: string | null;
    version: number;
};

export type CalculatedModuleResult = {
    passed: boolean;
    progress: number;
    score: number;
};

export type CreateModuleAttemptSettingsOfBookResult = {
    /**
     * Id of the actor of ActorType being assessed
     */
    actorId: string;
    moduleContentId: string;
    result: BookResult;
};

export type UpdateModuleAttemptSettingsOfBookResult = {
    result: BookResult;
    version: number;
};

export type ListOfModuleContentOfBookSettings = {
    totalItemCount: number;
    items: Array<ModuleContentOfBookSettings>;
};

export type ModuleContentOfBookSettings = ModuleContent & {
    settings: BookSettings | null;
};

export type BookSettings = {
    chapters: Array<Chapter>;
};

export type Chapter = {
    title: string | null;
    body: string | null;
    slides: Array<string> | null;
};

export type ModuleContent = {
    id: string | null;
    publisherId: string | null;
    moduleId: string | null;
    type: string | null;
    settings: unknown;
    published: boolean;
    created: string;
    modified: string;
    version: number;
};

export type CreateModuleContentSettingsOfBookSettings = ModuleContentSettingsOfBookSettings & {
    published: boolean;
};

export type ModuleContentSettingsOfBookSettings = {
    settings: BookSettings;
    files: Array<ModuleContentFileSettings> | null;
};

export type ModuleContentFileSettings = {
    name: string;
    dataUri: string;
};

export type UpdateModuleContentSettingsOfBookSettings = ModuleContentSettingsOfBookSettings & {
    version: number;
};

export type ListOfCertificate = {
    totalItemCount: number;
    items: Array<Certificate>;
};

export type Certificate = {
    id: string | null;
    name: string | null;
    description: string | null;
    logoUri: string | null;
    publisherId: string | null;
    publisherName: string | null;
    publisherLogoUri: string | null;
    validityPeriod: string;
    version: number;
};

export type CreateCertificateSettings = {
    publisherId: string;
    name: string;
    description: string | null;
    logoUri: string | null;
    validityPeriod: string;
};

export type UpdateCertificateSettings = {
    name: string;
    description: string | null;
    logoUri: string | null;
    validityPeriod: string;
    version: number;
};

export type ListOfCertification = {
    totalItemCount: number;
    items: Array<Certification>;
};

export type Certification = {
    id: string | null;
    certificateId: string | null;
    certificateName: string | null;
    certificateLogoUri: string | null;
    traineeId: string | null;
    traineeName: string | null;
    started: string;
    certified: string | null;
    expires: string | null;
    validityPeriod: string;
};

export type ListOfCertificationFact = {
    totalItemCount: number;
    items: Array<CertificationFact>;
};

export type CertificationFact = {
    id: string | null;
    certificationId: string | null;
    certificateId: string | null;
    traineeId: string | null;
    created: string;
    started: string | null;
    certified: string | null;
    validityPeriod: string | null;
};

/**
 * 0 = None
 * 1 = Left
 * 2 = Requested
 * 3 = Joined
 * 4 = Banned
 */
export type MemberStatus = 0 | 1 | 2 | 3 | 4;

export type ListOfClass = {
    totalItemCount: number;
    items: Array<Class>;
};

export type Class = {
    id: string | null;
    description: string | null;
    gracePeriod: string;
    allowAssessmentRequests: boolean;
    teamId: string | null;
    teamName: string | null;
    teamCourseActivationId: string | null;
    teamCourseActivated: boolean;
    organisationId: string | null;
    organisationName: string | null;
    organisationLogoUri: string | null;
    organisationCourseActivationId: string | null;
    organisationCourseActivated: boolean;
    publisherId: string | null;
    publisherName: string | null;
    publisherLogoUri: string | null;
    courseId: string | null;
    courseName: string | null;
    courseDescription: string | null;
    courseBannerUri: string | null;
    courseLogoUri: string | null;
    programs: Array<ProgramInClass> | null;
    courseRecommendedJobTypeIds: Array<string> | null;
    version: number;
};

export type ProgramInClass = {
    id: string | null;
    name: string | null;
};

export type CreateClassSettings = {
    teamId: string;
    courseId: string;
    description: string | null;
    gracePeriod: string;
    allowAssessmentRequests: boolean;
};

export type UpdateClassSettings = {
    description: string | null;
    gracePeriod: string;
    allowAssessmentRequests: boolean;
    version: number;
};

export type NotifyAssessorsSettings = {
    enrolmentId: string;
    assessmentId: string;
    traineeId: string;
};

export type ListOfCourse = {
    totalItemCount: number;
    items: Array<Course>;
};

export type Course = {
    id: string | null;
    name: string | null;
    description: string | null;
    bannerUri: string | null;
    logoUri: string | null;
    mediaUris: Array<string> | null;
    publisherId: string | null;
    publisherName: string | null;
    publisherLogoUri: string | null;
    programs: Array<ProgramInCourse> | null;
    sections: Array<SectionInCourse> | null;
    certificates: Array<CertificateInCourse> | null;
    recommendedJobTypeIds: Array<string> | null;
    processReports: Array<ProcessReportInCourse> | null;
    preSurvey: SurveyInCourse | null;
    postSurvey: SurveyInCourse | null;
    version: number;
};

export type ProgramInCourse = {
    id: string | null;
    name: string | null;
};

export type SectionInCourse = {
    name: string | null;
    modules: Array<ModuleInCourse> | null;
};

export type ModuleInCourse = {
    id: string | null;
    name: string | null;
    type: string | null;
    imageUri: string | null;
    open: boolean;
};

export type CertificateInCourse = {
    id: string | null;
    name: string | null;
    logoUri: string | null;
    validityPeriod: string;
    moduleIds: Array<string> | null;
};

export type ProcessReportInCourse = {
    id: string | null;
    name: string | null;
    type: string | null;
};

export type SurveyInCourse = {
    id: string | null;
    name: string | null;
    required: boolean;
};

export type CreateCourseSettings = {
    publisherId: string;
    name: string;
    /**
     * A base64 encoded image or a URL of existing image
     *
     */
    bannerUri: string | null;
    /**
     * A base64 encoded image or a URL of existing image
     *
     */
    logoUri: string | null;
    /**
     * A list of promotional medias. Elements can be:
     * - base64 encoded image
     * - uri of image
     * - url of video (i.e. video has to be hosted elsewhere, at least for now)
     */
    mediaUris: Array<string> | null;
    description: string | null;
    sections: Array<CourseSection> | null;
    recommendedJobTypeIds: Array<string> | null;
    processReportIds: Array<string> | null;
    preSurvey: CourseSurvey | null;
    postSurvey: CourseSurvey | null;
};

export type CourseSection = {
    name: string | null;
    modules: Array<CourseModule> | null;
};

export type CourseModule = {
    id: string | null;
    open: boolean;
    certificateIds: Array<string> | null;
};

export type CourseSurvey = {
    id: string | null;
    required: boolean;
};

export type UpdateCourseSettings = {
    name: string;
    bannerUri: string | null;
    logoUri: string | null;
    mediaUris: Array<string> | null;
    description: string | null;
    open: boolean;
    sections: Array<CourseSection> | null;
    recommendedJobTypeIds: Array<string> | null;
    processReportIds: Array<string> | null;
    preSurvey: CourseSurvey | null;
    postSurvey: CourseSurvey | null;
    version: number;
};

export type ListOfEnrolment = {
    totalItemCount: number;
    items: Array<Enrolment>;
};

export type Enrolment = Enrolment2 & {
    courseSections: Array<CourseSectionInEnrolment> | null;
    certifications: Array<CertificationInEnrolment> | null;
    preSurveyResponse: SurveyResponseInEnrolment | null;
    postSurveyResponse: SurveyResponseInEnrolment | null;
};

export type CourseSectionInEnrolment = {
    name: string | null;
    modules: Array<ModuleInEnrolment> | null;
};

export type ModuleInEnrolment = {
    id: string | null;
    name: string | null;
    type: string | null;
    imageUri: string | null;
    open: boolean;
    result: CalculatedModuleResult | null;
    modified: string | null;
};

export type CertificationInEnrolment = {
    id: string | null;
    certificateId: string | null;
    certificateName: string | null;
    certificateLogoUri: string | null;
    certificateModuleIds: Array<string> | null;
    started: string | null;
    certified: string | null;
    expires: string | null;
};

export type SurveyResponseInEnrolment = {
    surveyId: string | null;
    surveyName: string | null;
    required: boolean;
    started: string | null;
    submitted: string | null;
};

export type Enrolment2 = {
    id: string | null;
    traineeId: string | null;
    traineeName: string | null;
    traineeImageUri: string | null;
    traineeJobTypeId: string | null;
    traineeJobTypeName: string | null;
    traineeCourseActivationId: string | null;
    traineeCourseActivated: boolean;
    publisherId: string | null;
    publisherName: string | null;
    publisherLogoUri: string | null;
    programs: Array<ProgramInEnrolment> | null;
    courseId: string | null;
    courseName: string | null;
    courseBannerUri: string | null;
    courseLogoUri: string | null;
    classes: Array<ClassInEnrolment> | null;
};

export type ProgramInEnrolment = {
    id: string | null;
    name: string | null;
};

export type ClassInEnrolment = {
    id: string | null;
    teamId: string | null;
    teamName: string | null;
    teamCourseActivationId: string | null;
    teamCourseActivated: boolean;
    organisationId: string | null;
    organisationName: string | null;
    organisationCourseActivationId: string | null;
    organisationCourseActivated: boolean;
    joined: string;
    gracePeriod: string;
    description: string | null;
};

export type ListOfModuleAttempt = {
    totalItemCount: number;
    items: Array<ModuleAttempt>;
};

export type ListOfModule = {
    totalItemCount: number;
    items: Array<Module>;
};

export type Module = {
    id: string | null;
    name: string | null;
    description: string | null;
    imageUri: string | null;
    publisherId: string | null;
    publisherName: string | null;
    publisherLogoUri: string | null;
    type: string | null;
    published: boolean;
    publishedContentId: string | null;
    version: number;
};

export type CreateModuleSettings = {
    publisherId: string;
    type: string;
    name: string;
    description: string | null;
    imageUri: string | null;
    files: Array<CreateFileSettings> | null;
};

export type UpdateModuleSettings = {
    name: string;
    description: string | null;
    imageUri: string | null;
    version: number;
};

export type ListOfModuleNps = {
    totalItemCount: number;
    items: Array<ModuleNps>;
};

export type ModuleNps = {
    id: string | null;
    score: number;
    comments: string | null;
    dismissed: boolean;
    created: string;
    creatorId: string | null;
    creatorName: string | null;
    creatorImageUri: string | null;
    creatorJobTypeId: string | null;
    creatorJobTypeName: string | null;
    moduleId: string | null;
    moduleName: string | null;
    moduleType: string | null;
};

export type Nps = {
    id: string | null;
    itemId: string | null;
    score: number;
    comments: string | null;
    dismissed: boolean;
    created: string;
    creatorId: string | null;
    creatorName: string | null;
    creatorImageUri: string | null;
    creatorJobTypeId: string | null;
    creatorJobTypeName: string | null;
};

export type CreateNpsSettings = {
    moduleId: string;
    comments: string | null;
    score: number;
    dismissed: boolean;
};

export type ListOfModuleAttemptOfQuizResult = {
    totalItemCount: number;
    items: Array<ModuleAttemptOfQuizResult>;
};

export type ModuleAttemptOfQuizResult = ModuleAttempt & {
    result: QuizResult | null;
};

export type QuizResult = {
    sections: Array<QuizSectionResult> | null;
    submitted: boolean;
};

export type QuizSectionResult = {
    index: number;
    questions: Array<QuizQuestionResult> | null;
};

export type QuizQuestionResult = {
    index: number;
    answers: Array<number> | null;
};

export type CreateModuleAttemptSettingsOfQuizResult = {
    /**
     * Id of the actor of ActorType being assessed
     */
    actorId: string;
    moduleContentId: string;
    result: QuizResult;
};

export type UpdateModuleAttemptSettingsOfQuizResult = {
    result: QuizResult;
    version: number;
};

export type ListOfModuleContentOfQuizSettings = {
    totalItemCount: number;
    items: Array<ModuleContentOfQuizSettings>;
};

export type ModuleContentOfQuizSettings = ModuleContent & {
    settings: QuizSettings | null;
};

export type QuizSettings = {
    sections: Array<QuizSection>;
    /**
     * The percentage required to pass the module.
     */
    passScore: number;
    /**
     * If true, will cause the quiz to keep looping until participant passes all questions.
     */
    loop: boolean;
};

export type QuizSection = {
    title: string | null;
    questions: Array<QuizQuestion> | null;
};

export type QuizQuestion = {
    label: string | null;
    body: string | null;
    answers: Array<QuizAnswer> | null;
};

export type QuizAnswer = {
    label: string | null;
    body: string | null;
    correct: boolean;
};

export type CreateModuleContentSettingsOfQuizSettings = ModuleContentSettingsOfQuizSettings & {
    published: boolean;
};

export type ModuleContentSettingsOfQuizSettings = {
    settings: QuizSettings;
    files: Array<ModuleContentFileSettings> | null;
};

export type UpdateModuleContentSettingsOfQuizSettings = ModuleContentSettingsOfQuizSettings & {
    version: number;
};

export type ListOfModuleAttemptOfRevisionResult = {
    totalItemCount: number;
    items: Array<ModuleAttemptOfRevisionResult>;
};

export type ModuleAttemptOfRevisionResult = ModuleAttempt & {
    result: RevisionResult | null;
};

export type RevisionResult = {
    topics: Array<RevisionTopicResult> | null;
};

export type RevisionTopicResult = {
    index: number;
    attempts: Array<TopicAttempt> | null;
};

export type TopicAttempt = {
    form: TopicForm;
    correct: boolean;
};

/**
 * 0 = Flipcard
 * 1 = TrueOrFalse
 * 2 = MultipleChoices
 */
export type TopicForm = 0 | 1 | 2;

export type CreateModuleAttemptSettingsOfRevisionResult = {
    /**
     * Id of the actor of ActorType being assessed
     */
    actorId: string;
    moduleContentId: string;
    result: RevisionResult;
};

export type UpdateModuleAttemptSettingsOfRevisionResult = {
    result: RevisionResult;
    version: number;
};

export type ListOfModuleContentOfRevisionSettings = {
    totalItemCount: number;
    items: Array<ModuleContentOfRevisionSettings>;
};

export type ModuleContentOfRevisionSettings = ModuleContent & {
    settings: RevisionSettings | null;
};

export type RevisionSettings = {
    topics: Array<Topic>;
    /**
     * The percentage required to pass the module.
     */
    passScore: number;
};

export type Topic = {
    term: string;
    definition: string;
    hint: string | null;
};

export type CreateModuleContentSettingsOfRevisionSettings = ModuleContentSettingsOfRevisionSettings & {
    published: boolean;
};

export type ModuleContentSettingsOfRevisionSettings = {
    settings: RevisionSettings;
    files: Array<ModuleContentFileSettings> | null;
};

export type UpdateModuleContentSettingsOfRevisionSettings = ModuleContentSettingsOfRevisionSettings & {
    version: number;
};

export type ListOfTrainingSession = {
    totalItemCount: number;
    items: Array<TrainingSession>;
};

export type TrainingSession = {
    id: string | null;
    groupId: string | null;
    groupName: string | null;
    organisationId: string | null;
    name: string | null;
    description: string | null;
    location: Location;
    modules: Array<ModuleInTrainingSession> | null;
    start: string | null;
    end: string | null;
    status: TrainingSessionStatus;
    version: number;
};

export type ModuleInTrainingSession = {
    id: string | null;
    name: string | null;
    type: string | null;
};

/**
 * 0 = None
 * 1 = NotStarted
 * 2 = Started
 * 3 = Complete
 */
export type TrainingSessionStatus = 0 | 1 | 2 | 3;

export type CreateTrainingSessionSettings = {
    /**
     * The organisation or team id of the training session
     */
    groupId: string;
    name: string;
    description: string | null;
    start: string | null;
    end: string | null;
    location: LocationBuilder | null;
    modules: Array<TrainingSessionModule> | null;
};

export type TrainingSessionModule = {
    id: string | null;
};

export type UpdateTrainingSessionSettings = {
    name: string;
    description: string | null;
    start: string | null;
    end: string | null;
    location: LocationBuilder | null;
    modules: Array<TrainingSessionModule> | null;
    status: TrainingSessionStatus;
    version: number;
};

export type ListOfModuleAttemptOfVideoResult = {
    totalItemCount: number;
    items: Array<ModuleAttemptOfVideoResult>;
};

export type ModuleAttemptOfVideoResult = ModuleAttempt & {
    result: VideoResult | null;
};

export type VideoResult = {
    position: string;
    maxPosition: string;
    duration: string;
};

export type CreateModuleAttemptSettingsOfVideoResult = {
    /**
     * Id of the actor of ActorType being assessed
     */
    actorId: string;
    moduleContentId: string;
    result: VideoResult;
};

export type UpdateModuleAttemptSettingsOfVideoResult = {
    result: VideoResult;
    version: number;
};

export type ListOfModuleContentOfVideoSettings = {
    totalItemCount: number;
    items: Array<ModuleContentOfVideoSettings>;
};

export type ModuleContentOfVideoSettings = ModuleContent & {
    settings: VideoSettings | null;
};

export type VideoSettings = {
    type: VideoType;
    /**
     * A URI for the video.
     */
    source: string;
    /**
     * The duration of the video
     */
    duration: string;
};

/**
 * 0 = None
 * 1 = Vimeo
 * 2 = Youtube
 * 3 = Azure
 * 4 = Wistia
 */
export type VideoType = 0 | 1 | 2 | 3 | 4;

export type CreateModuleContentSettingsOfVideoSettings = ModuleContentSettingsOfVideoSettings & {
    published: boolean;
};

export type ModuleContentSettingsOfVideoSettings = {
    settings: VideoSettings;
    files: Array<ModuleContentFileSettings> | null;
};

export type UpdateModuleContentSettingsOfVideoSettings = ModuleContentSettingsOfVideoSettings & {
    version: number;
};

export type ListOfModuleAttemptOfAssessmentResult = {
    totalItemCount: number;
    items: Array<ModuleAttemptOfAssessmentResult>;
};

export type ModuleAttemptOfAssessmentResult = ModuleAttempt & {
    result: AssessmentResult | null;
};

export type AssessmentResult = {
    attempts: Array<AssessmentAttempt> | null;
};

export type AssessmentAttempt = {
    id: string | null;
    assessorId: string | null;
    sections: Array<AssessmentSectionResult> | null;
    performed: string;
    notes: string | null;
};

export type AssessmentSectionResult = {
    index: number;
    selectedCriteria: Array<number> | null;
};

export type CreateModuleAttemptSettingsOfAssessmentResult = {
    /**
     * Id of the actor of ActorType being assessed
     */
    actorId: string;
    moduleContentId: string;
    result: AssessmentResult;
};

export type UpdateModuleAttemptSettingsOfAssessmentResult = {
    result: AssessmentResult;
    version: number;
};

export type ListOfModuleContentOfAssessmentSettings = {
    totalItemCount: number;
    items: Array<ModuleContentOfAssessmentSettings>;
};

export type ModuleContentOfAssessmentSettings = ModuleContent & {
    settings: AssessmentSettings | null;
};

export type AssessmentSettings = {
    /**
     * The number of times the assessment must be passed for the module to be considered passed.
     */
    requiredPasses: number;
    /**
     * The number of times the assessment must be passed, after the initial pass, for the module to be considered passed.
     */
    subsequentRequiredPasses: number | null;
    /**
     * The percentage required to pass the assessment.
     */
    passScore: number;
    sections: Array<AssessmentSection>;
};

export type AssessmentSection = {
    title: string | null;
    criteria: Array<Criterion>;
};

export type Criterion = {
    body: string;
};

export type CreateModuleContentSettingsOfAssessmentSettings = ModuleContentSettingsOfAssessmentSettings & {
    published: boolean;
};

export type ModuleContentSettingsOfAssessmentSettings = {
    settings: AssessmentSettings;
    files: Array<ModuleContentFileSettings> | null;
};

export type UpdateModuleContentSettingsOfAssessmentSettings = ModuleContentSettingsOfAssessmentSettings & {
    version: number;
};

export type ListOfAssessmentSubAttempt = {
    totalItemCount: number;
    items: Array<AssessmentSubAttempt>;
};

export type AssessmentSubAttempt = {
    id: string | null;
    attemptId: string | null;
    actorId: string | null;
    actorName: string | null;
    actorType: ActorType;
    assessorId: string | null;
    assessorName: string | null;
    sections: Array<AssessmentSectionResult> | null;
    created: string;
    modified: string;
    performed: string;
    notes: string | null;
    assessmentId: string | null;
    assessmentName: string | null;
    assessmentContentId: string | null;
    passScore: number;
    score: number;
    passed: boolean;
    publisherId: string | null;
    classIds: Array<string> | null;
    trainingSessionId: string | null;
    trainingSessionModuleAttemptId: string | null;
};

export type CreateAssessmentSubAttemptSettings = {
    /**
     * Id of the actor of ActorType being assessed
     */
    actorId: string;
    assessorId: string;
    moduleId: string;
    moduleContentId: string;
    sections: Array<AssessmentSectionResult>;
    performed: string;
    notes: string | null;
};

export type UpdateAssessmentSubAttemptSettings = {
    assessorId: string;
    sections: Array<AssessmentSectionResult>;
    performed: string;
    notes: string | null;
    version: number;
};

export type AuthenticationSettings = {
    method: AuthenticationMethod;
    email: string;
    /**
     * This will be the password if using password to login, or the one-time passcode if using one-time passcode
     * to login.
     */
    password: string | null;
    /**
     * Optional 2FA code.
     */
    twoFactorAuthenticationCode: string | null;
};

/**
 * 0 = Password
 * 1 = OneTimePasscode
 */
export type AuthenticationMethod = 0 | 1;

export type ChallengeToken = Token & {
    success: boolean;
    twoFactorAuthenticationChallenge: TwoFactorAuthenticationType;
    rateLimit: string;
};

/**
 * 0 = None
 * 1 = Sms
 * 2 = Email
 */
export type TwoFactorAuthenticationType = 0 | 1 | 2;

export type Identity = {
    id: string | null;
    type: IdentityType;
    name: string | null;
    email: string | null;
    description: string | null;
    imageUri: string | null;
    groups: Array<IdentityGroup> | null;
    impersonatorId: string | null;
};

export type IdentityGroup = {
    groupId: string | null;
    groupType: string | null;
    parentGroups: Array<GroupIdAndType> | null;
    displayId: string | null;
    labelIds: Array<string> | null;
    roles: Array<string> | null;
};

export type GroupIdAndType = {
    type: string | null;
    id: string | null;
};

export type CommunicationPreferences = {
    userId: string | null;
    emails: Array<EmailPreference> | null;
    version: number;
};

export type EmailPreference = EmailPreference2 & {
    category: string | null;
    reason: string | null;
};

export type EmailPreference2 = {
    type: string | null;
    ignore: boolean;
};

export type UpdateCommunicationPreferencesSettings = {
    emails: Array<EmailPreference2> | null;
    version: number;
};

export type UnsubscribeToken = {
    userId: string | null;
    emailType: string | null;
};

export type EmailSettings = {
    email: string;
};

export type ListOfGroupComment = {
    totalItemCount: number;
    items: Array<GroupComment>;
};

export type GroupComment = Comment & {
    groupName: string | null;
};

export type Group = {
    id: string | null;
    name: string | null;
    description: string | null;
    type: string | null;
    organisationId: string | null;
    teamId: string | null;
};

export type ListOfGroupFile = {
    totalItemCount: number;
    items: Array<GroupFile>;
};

export type GroupFile = File & {
    groupName: string | null;
};

export type ListOfJobType = {
    totalItemCount: number;
    items: Array<JobType>;
};

export type JobType = {
    id: string | null;
    name: string | null;
    category: string | null;
    version: number;
};

export type CreateJobTypeSettings = {
    name: string;
    category: string | null;
};

export type UpdateJobTypeSettings = {
    name: string;
    category: string | null;
    version: number;
};

export type ListOfLabel = {
    totalItemCount: number;
    items: Array<Label>;
};

export type Label = {
    id: string | null;
    version: number;
    groupId: string | null;
    groupType: string | null;
    groupName: string | null;
    name: string | null;
    colour: Colour;
    inactive: boolean;
};

export type Colour = {
    red: number;
    green: number;
    blue: number;
    alpha: number;
};

export type CreateLabelSettings = {
    groupId: string;
    name: string;
    colour: Colour;
};

export type UpdateLabelSettings = {
    name: string;
    colour: Colour;
    inactive: boolean;
    version: number;
};

export type ListOfMember = {
    totalItemCount: number;
    items: Array<Member>;
};

export type Member = {
    id: string | null;
    groupId: string | null;
    groupType: string | null;
    groupName: string | null;
    parentGroups: Array<GroupIdAndType> | null;
    templateId: string | null;
    templateParentIds: Array<string> | null;
    userId: string | null;
    userName: string | null;
    userImageUri: string | null;
    userEmail: string | null;
    userJobTypeId: string | null;
    userJobTypeName: string | null;
    userJobTypeCategory: string | null;
    userQualifications: string | null;
    userActivated: boolean;
    userLastActive: string | null;
    displayId: string | null;
    status: MemberStatus;
    roles: Array<string> | null;
    labelIds: Array<string> | null;
    version: number;
    created: string;
    modified: string;
    joined: string;
};

export type MemberHistory = {
    id: string | null;
    userId: string | null;
    status: MemberStatus;
    roles: Array<string> | null;
};

export type AddGroupMemberSettings = {
    displayId: string | null;
    additionalRoles: Array<string> | null;
    labelIds: Array<string> | null;
    notify: boolean;
    message: string | null;
};

export type UpdateGroupMemberSettings = {
    displayId: string | null;
    additionalRoles: Array<string> | null;
    labelIds: Array<string> | null;
};

export type ListOfOrganisationAccessToken = {
    totalItemCount: number;
    items: Array<OrganisationAccessToken>;
};

export type OrganisationAccessToken = {
    id: string | null;
    name: string | null;
    organisationId: string | null;
    roles: Array<string> | null;
    created: string;
    creatorId: string | null;
    creatorName: string | null;
    lastUsed: string | null;
    /**
     * Only available at time of creation
     */
    token: string | null;
};

export type CreateOrganisationAccessTokenSettings = {
    name: string;
    organisationId: string;
    roles: Array<string>;
};

export type ListOfOrganisation = {
    totalItemCount: number;
    items: Array<Organisation>;
};

export type Organisation = {
    id: string | null;
    name: string | null;
    shortName: string | null;
    alternativeNames: Array<string> | null;
    description: string | null;
    contactEmail: string | null;
    bannerUri: string | null;
    logoUri: string | null;
    location: Location;
    privacy: PrivacyLevel;
    website: string | null;
    cultureCode: string | null;
    timeZoneId: string | null;
    portalUri: string | null;
    colour: Colour;
    registrationWhitelist: Array<string> | null;
    publishingApproved: boolean;
    shifts: Array<Shift> | null;
    version: number;
};

/**
 * 0 = Public
 * 1 = Closed
 * 2 = Secret
 */
export type PrivacyLevel = 0 | 1 | 2;

export type Shift = {
    start: string;
    end: string;
};

export type CreateOrganisationSettings = {
    name: string;
    shortName: string | null;
    alternativeNames: Array<string>;
    description: string | null;
    contactEmail: string | null;
    bannerUri: string | null;
    logoUri: string | null;
    colour: Colour;
    location: LocationBuilder | null;
    website: string | null;
    portalUri: string | null;
    cultureCode: string | null;
    timeZoneId: string | null;
    privacy: PrivacyLevel;
    registrationWhitelist: Array<string> | null;
    shifts: Array<Shift> | null;
};

export type UpdateOrganisationSettings = {
    name: string;
    shortName: string | null;
    alternativeNames: Array<string>;
    description: string | null;
    contactEmail: string | null;
    bannerUri: string | null;
    logoUri: string | null;
    colour: Colour;
    location: LocationBuilder | null;
    website: string | null;
    portalUri: string | null;
    privacy: PrivacyLevel;
    timeZoneId: string | null;
    cultureCode: string | null;
    registrationWhitelist: Array<string> | null;
    shifts: Array<Shift> | null;
    version: number;
};

export type Password = {
    version: number;
    exists: boolean;
    twoFactorAuthentication: TwoFactorAuthenticationType;
};

export type UpdatePasswordSettings = {
    password: string;
    version: number;
};

export type UpdateTwoFactorAuthenticationSettings = {
    type: TwoFactorAuthenticationType;
    userVersion: number;
};

export type RequestResetPasswordSettings = {
    email: string;
};

export type ResetPasswordSettings = {
    token: string;
    password: string;
};

export type ListOfRole = {
    totalItemCount: number;
    items: Array<Role>;
};

export type Role = {
    name: string | null;
    groupType: string | null;
    owner: boolean;
    default: boolean;
    fallback: boolean;
    description: string | null;
};

export type ListOfTeam = {
    totalItemCount: number;
    items: Array<Team>;
};

export type Team = {
    id: string | null;
    shortName: string | null;
    alternativeNames: Array<string> | null;
    name: string | null;
    description: string | null;
    bannerUri: string | null;
    privacy: PrivacyLevel;
    tags: Array<string> | null;
    organisationId: string | null;
    organisationName: string | null;
    organisationLogoUri: string | null;
    organisationPrivacy: PrivacyLevel;
    version: number;
};

export type CreateTeamSettings = {
    organisationId: string;
    name: string;
    shortName: string | null;
    alternativeNames: Array<string>;
    description: string | null;
    bannerUri: string | null;
    privacy: PrivacyLevel;
    tags: Array<string> | null;
};

export type UpdateTeamSettings = {
    name: string;
    shortName: string | null;
    alternativeNames: Array<string>;
    description: string | null;
    bannerUri: string | null;
    privacy: PrivacyLevel;
    tags: Array<string> | null;
    version: number;
};

export type ListOfUserActivity = {
    totalItemCount: number;
    items: Array<UserActivity>;
};

export type UserActivity = {
    id: string | null;
    trackId: string | null;
    activityType: UserActivityType;
    userId: string | null;
    creatorId: string | null;
    creatorType: IdentityType;
    payload: unknown;
    created: string;
    modified: string;
};

export type UserActivityType = 'Unknown' | 'Joined' | 'Left' | 'Banned' | 'RolesAdded' | 'RolesRemoved' | 'ModuleAttempt' | 'SurveyResponse';

export type ListOfUser = {
    totalItemCount: number;
    items: Array<User>;
};

export type User = {
    id: string | null;
    name: string | null;
    alternativeNames: Array<string> | null;
    imageUri: string | null;
    description: string | null;
    qualifications: string | null;
    jobTypeId: string | null;
    jobTypeName: string | null;
    jobTypeCategory: string | null;
    verified: boolean;
    version: number;
};

export type CreateUserSettings = {
    name: string;
    alternativeNames: Array<string> | null;
    email: string;
    password: string;
    reCaptchaResponse: string | null;
    redirect: string | null;
};

export type OnboardUserSettings = {
    name: string | null;
    email: string;
    groupId: string;
    displayId: string | null;
    jobTypeId: string | null;
    additionalRoles: Array<string> | null;
    labelIds: Array<string> | null;
    notify: boolean;
    message: string | null;
};

export type UpdateUserSettings = {
    name: string;
    alternativeNames: Array<string>;
    qualifications: string | null;
    description: string | null;
    jobTypeId: string | null;
    imageUri: string | null;
    version: number;
};

export type MergeUserSettings = {
    primaryUserId: string;
    secondaryUserId: string;
};

export type SendWelcomeEmailSettings = {
    groupId: string | null;
    message: string | null;
    redirect: string | null;
};

export type UserEmails = {
    id: string | null;
    emails: Array<UserEmail> | null;
    primaryEmail: string | null;
    version: number;
};

export type UserEmail = {
    email: string | null;
    verified: boolean;
};

export type UserEmailSettings = {
    email: string;
    version: number;
};

export type UserEmailVerificationToken = Token & {
    /**
     * If is verifying the primary email.
     */
    primary: boolean;
    /**
     * If the email has been already been verified.
     */
    regression: boolean;
};

export type UserPhoneNumber = {
    id: string | null;
    number: string | null;
    verified: boolean;
    version: number;
};

export type UpdateUserPhoneNumberSettings = {
    userVersion: number;
    phoneNumber: string | null;
};

export type VerificationRequestResult = {
    sent: boolean;
    waitSeconds: number;
};

export type ClientOptions = {
    baseUrl: 'https://rumbledev.azurewebsites.net' | (string & {});
};